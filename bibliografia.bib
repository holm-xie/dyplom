@Misc{ monash-db-hvsp,
	title = "The Naming of the Foo",
	author = "Curt Monash",
	month = mar,
	year = "2010",
	note = "Artyku{\l} sugerujący nazw\c{e} dla problemu rozwiązywanego przez NoSQL: HVSP (High Volume Simple Processing)"
}

@InProceedings{ google-bigtable,
	abstract = "Bigtable is a distributed storage system for managing structured data that is designed to scale to a very large size: petabytes of data across thousands of commodity servers. Many projects at Google store data in Bigtable, including web indexing, Google Earth, and Google Finance. These applications place very different demands on Bigtable, both in terms of data size (from URLs to web pages to satellite imagery) and latency requirements (from backend bulk processing to real-time data serving). Despite these varied demands, Bigtable has successfully provided a flexible, high-performance solution for all of these Google products. In this paper we describe the simple data model provided by Bigtable, which gives clients dynamic control over data layout and format, and we describe the design and implementation of Bigtable.",
	address = "Berkeley, CA, USA",
	author = "Fay Chang and Jeffrey Dean and Sanjay Ghemawat and Wilson C. Hsieh and Deborah A. Wallach and Mike Burrows and Tushar Chandra and Andrew Fikes and Robert E. Gruber",
	booktitle = "OSDI '06: Proceedings of the 7th symposium on Operating systems design and implementation",
	citeulike-article-id = "3765219",
	citeulike-linkout-0 = "http://portal.acm.org/citation.cfm?id=1298475",
	isbn = "1-931971-47-1",
	keywords = "bloom, bloom\_filter, data-intensive, distributed, parallel, storage",
	location = "Seattle, Washington",
	pages = "205--218",
	posted-at = "2009-02-02 22:45:44",
	priority = "0",
	publisher = "USENIX Association",
	title = "Bigtable: a distributed storage system for structured data",
	url = "http://portal.acm.org/citation.cfm?id=1298475",
	year = "2006"
}

@Article{ amazon-dynamo,
	abstract = "Reliability at massive scale is one of the biggest challenges we face at Amazon.com, one of the largest e-commerce operations in the world; even the slightest outage has significant financial consequences and impacts customer trust. The Amazon.com platform, which provides services for many web sites worldwide, is implemented on top of an infrastructure of tens of thousands of servers and network components located in many datacenters around the world. At this scale, small and large components fail continuously and the way persistent state is managed in the face of these failures drives the reliability and scalability of the software systems. This paper presents the design and implementation of Dynamo, a highly available key-value storage system that some of Amazon's core services use to provide an ” always-on” experience. To achieve this level of availability, Dynamo sacrifices consistency under certain failure scenarios. It makes extensive use of object versioning and application-assisted conflict resolution in a manner that provides a novel interface for developers to use.",
	address = "New York, NY, USA",
	author = "Giuseppe DeCandia and Deniz Hastorun and Madan Jampani and Gunavardhan Kakulapati and Avinash Lakshman and Alex Pilchin and Swaminathan Sivasubramanian and Peter Vosshall and Werner Vogels",
	booktitle = "SOSP '07: Proceedings of twenty-first ACM SIGOPS symposium on Operating systems principles",
	citeulike-article-id = "1771837",
	citeulike-linkout-0 = "http://portal.acm.org/citation.cfm?id=1294281",
	citeulike-linkout-1 = "http://dx.doi.org/10.1145/1294261.1294281",
	doi = "10.1145/1294261.1294281",
	isbn = "9781595935915",
	issn = "0163-5980",
	journal = "SIGOPS Oper. Syst. Rev.",
	keywords = "2007, amazon, cloud, dynamo, key, sosp, value",
	number = "6",
	pages = "205--220",
	posted-at = "2009-10-21 11:36:18",
	priority = "2",
	publisher = "ACM",
	title = "Dynamo: amazon's highly available key-value store",
	url = "http://dx.doi.org/10.1145/1294261.1294281",
	volume = "41",
	year = "2007"
}

@Article{ brewers-conjecture,
	abstract = "When designing distributed web services, there are three properties that are commonly desired: consistency, availability, and partition tolerance. It is impossible to achieve all three. In this note, we prove this conjecture in the asynchronous network model, and then discuss solutions to this dilemma in the partially synchronous model.",
	address = "New York, NY, USA",
	author = "Seth Gilbert and Nancy Lynch",
	doi = "10.1145/564585.564601",
	issn = "0163-5700",
	journal = "SIGACT News",
	keywords = "availability, available, brewer, conjecture, consistency, consistent, partition, tolerant",
	month = "June",
	number = "2",
	pages = "51--59",
	publisher = "ACM",
	title = "Brewer's conjecture and the feasibility of consistent, available, partition-tolerant web services",
	url = "http://dx.doi.org/10.1145/564585.564601",
	volume = "33",
	year = "2002",
	note = "Oryginalny artyku{\l} definiujący teori\c{e} CAP.",
	citeulike-article-id = "1649756",
	citeulike-linkout-0 = "http://portal.acm.org/citation.cfm?id=564601",
	citeulike-linkout-1 = "http://dx.doi.org/10.1145/564585.564601",
	posted-at = "2009-09-07 06:41:47",
	priority = "2"
}

